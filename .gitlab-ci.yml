# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.9

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# https://pip.pypa.io/en/stable/topics/caching/
cache:
  paths:
    - .cache/pip

before_script:
  - python --version ; pip --version  # For debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install -r requirements.txt

# 2 stages linting and test before we are generating a release
stages:
    - lint
    - test
    - prepare
    - release

prepare_job:
    stage: prepare
    image: alpine:latest
    rules:
    - if '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
    script:
      - apk add curl jq
      - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT/repository/changelog?version=$CI_COMMIT_TAG" | jq -r .notesd > release_notes.md'
      - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" -X POST "$CI_API_V4_URL/projects/$CI_PROJECT/repository/changelog?version=$CI_COMMIT_TAG"'
    artifacts:
      paths:
      - release_notes.md

release_job:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    needs:
      - job: prepare_job
    rules:
    - if '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
    script:
      - echo "Creating release"
    release:
      name: 'CPM-Downloader release $CI_COMMIT_TAG'
      description: release_notes.md
      tag_name: '$CI_COMMIT_TAG'
      ref: '$CI_COMMIT_SHA'
      assets:
        links:
          - name: 'Container Image $CI_COMMIT_TAG'
            url: "https://$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/$CI_COMMIT_SHA"

linting:
    stage: lint
    script:
        - pylint --fail-under=8.0 --ignore=test*.py --errors-only --disable=C,R */*.py

unittest:
    stage: test
    script:
        - python3 -m unittest discover -p test_*.py
